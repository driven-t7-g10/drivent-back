generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique @db.VarChar(255)
  password   String       @db.VarChar(255)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  Session    Session[]
  Enrollment Enrollment[]
  Booking    Booking[]
  Entry      Entry[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Event {
  id                 Int      @id @default(autoincrement())
  title              String   @db.VarChar(255)
  backgroundImageUrl String   @db.VarChar(255)
  logoImageUrl       String   @db.VarChar(255)
  startsAt           DateTime
  endsAt             DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())
  Activity           Activity[]
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  cpf       String   @db.VarChar(255)
  birthday  DateTime
  phone     String    @db.VarChar(255)
  userId    Int       @unique
  User      User      @relation(fields: [userId], references: [id])
  Address   Address[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  Ticket    Ticket[]
}

model Address {
  id            Int        @id @default(autoincrement())
  cep           String     @db.VarChar(255)
  street        String     @db.VarChar(255)
  city          String     @db.VarChar(255)
  state         String     @db.VarChar(255)
  number        String     @db.VarChar(255)
  neighborhood  String     @db.VarChar(255)
  addressDetail String?    @db.VarChar(255)
  enrollmentId  Int        @unique
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())
}

model TicketType {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(255)
  price         Int
  isRemote      Boolean
  includesHotel Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  Ticket        Ticket[]
}

model Ticket {
  id           Int          @id @default(autoincrement())
  ticketTypeId Int
  enrollmentId Int
  status       TicketStatus
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  Payment      Payment[]
  Enrollment   Enrollment   @relation(fields: [enrollmentId], references: [id])
  TicketType   TicketType   @relation(fields: [ticketTypeId], references: [id])
}

model Payment {
  id             Int      @id @default(autoincrement())
  ticketId       Int
  value          Int
  cardIssuer     String
  cardLastDigits String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model Hotel {
  id        Int      @id @default(autoincrement())
  name      String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Room {
  id        Int       @id @default(autoincrement())
  name      String
  capacity  Int
  hotelId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model Booking {
  id        Int      @id @default(autoincrement())
  userId    Int
  roomId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Activity {
  id        Int      @id @default(autoincrement())
  name      String
  startsAt  DateTime
  endsAt    DateTime
  eventId   Int
  Event     Event    @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Entry     Entry[]
}

model Entry {
  id          Int      @id @default(autoincrement())
  activityId  Int
  Activity    Activity @relation(fields: [activityId], references: [id])
  userId      Int
  User        User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
